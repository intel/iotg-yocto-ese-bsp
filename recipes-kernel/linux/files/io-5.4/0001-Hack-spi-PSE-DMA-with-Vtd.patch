From 9eaf82cbcbbea69a453f1204657dc03cb579ead0 Mon Sep 17 00:00:00 2001
From: "D, Lakshmi Sowjanya" <lakshmi.sowjanya.d@intel.com>
Date: Fri, 14 Aug 2020 16:24:18 +0530
Subject: [PATCH 1/1] Hack: spi: PSE DMA with Vtd

serial: 8250: PSE DMA with Vtd

HACK: PSE DMA with Vtd require the peripheral to perform the
buffer mapping instead of DMA device

Signed-off-by: D, Lakshmi Sowjanya <lakshmi.sowjanya.d@intel.com>
---
 drivers/iio/adc/intel-adc.c        |  2 +-
 drivers/spi/spi.c                  | 27 ++++++++++++++++++
 drivers/tty/serial/8250/8250_dma.c | 45 ++++++++++++++++++++++++++----
 3 files changed, 67 insertions(+), 7 deletions(-)

diff --git a/drivers/iio/adc/intel-adc.c b/drivers/iio/adc/intel-adc.c
index 1188cfa110a8..e9483b471604 100644
--- a/drivers/iio/adc/intel-adc.c
+++ b/drivers/iio/adc/intel-adc.c
@@ -371,7 +371,7 @@ static void intel_adc_dma_enable(struct intel_adc *adc)
 	}
 
 	adc->dma_st.len = (ADC_NUM_SAMPL_DEFAULT * adc->num_slots) * 4; /* DMA buffer in bytes */
-	adc->dma_st.rx_buf = dma_alloc_coherent(adc->dma_st.dma_chan->device->dev,
+	adc->dma_st.rx_buf = dma_alloc_coherent(dev,
 					       adc->dma_st.len,
 					       &adc->dma_st.rx_dma_buf,
 					       GFP_KERNEL);
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index c6242f0a307f..3d38fb82978b 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -33,6 +33,7 @@
 #include <linux/highmem.h>
 #include <linux/idr.h>
 #include <linux/platform_data/x86/apple.h>
+#include <linux/pci.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/spi.h>
@@ -893,6 +894,20 @@ void spi_unmap_buf(struct spi_controller *ctlr, struct device *dev,
 	}
 }
 
+/* Hack for PSE SPI */
+static int hack_for_ehl_pse_dma(struct device *dev)
+{
+	struct pci_dev *spi_pci;
+
+	spi_pci = to_pci_dev(dev);
+	if ((spi_pci->vendor == PCI_VENDOR_ID_INTEL) &&
+		(spi_pci->device == 0x4b84 || spi_pci->device == 0x4b85 ||
+		 spi_pci->device == 0x4b86 || spi_pci->device == 0x4b87))
+		return 1;
+
+	return 0;
+}
+
 static int __spi_map_msg(struct spi_controller *ctlr, struct spi_message *msg)
 {
 	struct device *tx_dev, *rx_dev;
@@ -912,6 +927,12 @@ static int __spi_map_msg(struct spi_controller *ctlr, struct spi_message *msg)
 	else
 		rx_dev = ctlr->dev.parent;
 
+	/* Hack for PSE SPI */
+	if (hack_for_ehl_pse_dma(ctlr->dev.parent)) {
+		tx_dev = ctlr->dev.parent;
+		rx_dev = ctlr->dev.parent;
+	}
+
 	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
 		if (!ctlr->can_dma(ctlr, msg->spi, xfer))
 			continue;
@@ -959,6 +980,12 @@ static int __spi_unmap_msg(struct spi_controller *ctlr, struct spi_message *msg)
 	else
 		rx_dev = ctlr->dev.parent;
 
+	/* Hack fo PSE SPI */
+	if (hack_for_ehl_pse_dma(ctlr->dev.parent)) {
+		tx_dev = ctlr->dev.parent;
+		rx_dev = ctlr->dev.parent;
+	}
+
 	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
 		if (!ctlr->can_dma(ctlr, msg->spi, xfer))
 			continue;
diff --git a/drivers/tty/serial/8250/8250_dma.c b/drivers/tty/serial/8250/8250_dma.c
index 890fa7ddaa7f..de4562015ab9 100644
--- a/drivers/tty/serial/8250/8250_dma.c
+++ b/drivers/tty/serial/8250/8250_dma.c
@@ -8,6 +8,7 @@
 #include <linux/tty_flip.h>
 #include <linux/serial_reg.h>
 #include <linux/dma-mapping.h>
+#include <linux/pci.h>
 
 #include "8250.h"
 
@@ -143,6 +144,22 @@ void serial8250_rx_dma_flush(struct uart_8250_port *p)
 }
 EXPORT_SYMBOL_GPL(serial8250_rx_dma_flush);
 
+/* Hack for PSE UART */
+static int hack_for_ehl_pse_dma(struct device *dev)
+{
+	struct pci_dev *port_pci;
+
+	port_pci = to_pci_dev(dev);
+
+	if ((port_pci->vendor == PCI_VENDOR_ID_INTEL) &&
+		(port_pci->device == 0x4b96 || port_pci->device == 0x4b97 ||
+		 port_pci->device == 0x4b98 || port_pci->device == 0x4b99 ||
+		 port_pci->device == 0x4b9a || port_pci->device == 0x4b9b))
+		return 1;
+
+	return 0;
+}
+
 int serial8250_request_dma(struct uart_8250_port *p)
 {
 	struct uart_8250_dma	*dma = p->dma;
@@ -209,18 +226,34 @@ int serial8250_request_dma(struct uart_8250_port *p)
 	if (!dma->rx_size)
 		dma->rx_size = PAGE_SIZE;
 
-	dma->rx_buf = dma_alloc_coherent(dma->rxchan->device->dev, dma->rx_size,
-					&dma->rx_addr, GFP_KERNEL);
+	/* Hack for PSE UART */
+	if (hack_for_ehl_pse_dma(p->port.dev)) {
+		dma->rx_buf = dma_alloc_coherent(p->port.dev, dma->rx_size,
+						&dma->rx_addr, GFP_KERNEL);
+	} else {
+		dma->rx_buf = dma_alloc_coherent(dma->rxchan->device->dev,
+				dma->rx_size, &dma->rx_addr, GFP_KERNEL);
+	}
+
 	if (!dma->rx_buf) {
 		ret = -ENOMEM;
 		goto err;
 	}
 
 	/* TX buffer */
-	dma->tx_addr = dma_map_single(dma->txchan->device->dev,
-					p->port.state->xmit.buf,
-					UART_XMIT_SIZE,
-					DMA_TO_DEVICE);
+	/*Hack for PSE UART*/
+	if (hack_for_ehl_pse_dma(p->port.dev)) {
+		dma->tx_addr = dma_map_single(p->port.dev,
+						p->port.state->xmit.buf,
+						UART_XMIT_SIZE,
+						DMA_TO_DEVICE);
+	} else {
+		dma->tx_addr = dma_map_single(dma->txchan->device->dev,
+						p->port.state->xmit.buf,
+						UART_XMIT_SIZE,
+						DMA_TO_DEVICE);
+	}
+
 	if (dma_mapping_error(dma->txchan->device->dev, dma->tx_addr)) {
 		dma_free_coherent(dma->rxchan->device->dev, dma->rx_size,
 				  dma->rx_buf, dma->rx_addr);
-- 
2.17.1

