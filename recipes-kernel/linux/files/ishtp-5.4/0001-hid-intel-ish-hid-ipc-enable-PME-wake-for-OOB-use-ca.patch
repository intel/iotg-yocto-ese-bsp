From 2ea2c65059ac53243255876ebe36311313b37cd9 Mon Sep 17 00:00:00 2001
From: Even Xu <even.xu@intel.com>
Date: Fri, 17 Apr 2020 15:23:45 +0800
Subject: [PATCH] hid: intel-ish-hid: ipc: enable PME wake for OOB use case

Signed-off-by: Even Xu <even.xu@intel.com>
Signed-off-by: Ba, Najumon <najumon.ba@intel.com>
---
 drivers/hid/intel-ish-hid/ipc/pci-ish.c | 39 +++++++++++++++++++++++++++++----
 1 file changed, 35 insertions(+), 4 deletions(-)

diff --git a/drivers/hid/intel-ish-hid/ipc/pci-ish.c b/drivers/hid/intel-ish-hid/ipc/pci-ish.c
index 1d58194..0a4eb60 100644
--- a/drivers/hid/intel-ish-hid/ipc/pci-ish.c
+++ b/drivers/hid/intel-ish-hid/ipc/pci-ish.c
@@ -13,6 +13,7 @@
 #include <linux/errno.h>
 #include <linux/types.h>
 #include <linux/pci.h>
+#include <linux/acpi.h>
 #include <linux/sched.h>
 #include <linux/suspend.h>
 #include <linux/interrupt.h>
@@ -106,6 +107,37 @@ static inline bool ish_should_enter_d0i3(struct pci_dev *pdev)
 	return !pm_suspend_via_firmware() || pdev->device == CHV_DEVICE_ID;
 }
 
+static void enable_gpe(struct device *dev)
+{
+	acpi_status acpi_sts;
+	struct acpi_device *adev;
+	struct acpi_device_wakeup *wakeup;
+
+	adev = ACPI_COMPANION(dev);
+	if (!adev) {
+		dev_err(dev, "get acpi handle failed\n");
+		return;
+	}
+	wakeup = &adev->wakeup;
+
+	acpi_sts = acpi_enable_gpe(wakeup->gpe_device, wakeup->gpe_number);
+	if (ACPI_FAILURE(acpi_sts)) {
+		dev_err(dev, "enable ose_gpe failed\n");
+	}
+}
+
+static void enable_pme_wake(struct pci_dev *pdev)
+{
+	if (pci_pme_capable(pdev, PCI_D0) ||
+		pci_pme_capable(pdev, PCI_D3hot) ||
+		pci_pme_capable(pdev, PCI_D3cold)) {
+
+		pci_pme_active(pdev, true);
+		enable_gpe(&pdev->dev);
+		dev_warn(&pdev->dev, "ish ipc driver pme wake enabled\n");
+	}
+}
+
 /**
  * ish_probe() - PCI driver probe callback
  * @pdev:	pci device
@@ -175,10 +207,8 @@ static int ish_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	init_waitqueue_head(&ishtp->resume_wait);
 
 	/* Enable PME for EHL */
-	if (pdev->device == EHL_Ax_DEVICE_ID) {
-		device_init_wakeup(&pdev->dev, 1);
-		dev_warn(dev, "evenadd ehl wakeup capability\n");
-	}
+	if (pdev->device == EHL_Ax_DEVICE_ID)
+		enable_pme_wake(pdev);
 
 	ret = ish_init(ishtp);
 	if (ret)
@@ -320,6 +350,7 @@ static int __maybe_unused ish_resume(struct device *device)
 	/* add this to finish power flow for EHL */
 	if (dev->pdev->device == EHL_Ax_DEVICE_ID) {
 		pci_set_power_state(pdev, PCI_D0);
+		enable_pme_wake(pdev);
 		dev_warn(dev->devc, "set power state to D0 for ehl\n");
 	}
 
-- 
2.7.4

